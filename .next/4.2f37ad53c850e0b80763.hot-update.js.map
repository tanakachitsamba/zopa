{"version":3,"sources":["/Users/tanakasamuel/git/PROJECTS/zopa/node_modules/react-currency-input/lib/react-currency-input.es.js"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAC2B;AAC3B;;AAEA;AACA;AACA;;AAEA,mBAAmB,sBAAsB;AACzC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wBAAwB,eAAe,EAAE;AACzC,yBAAyB,gBAAgB,EAAE;;AAE3C;AACA;AACA;AACA;AACA;AACA;;AAEA,0BAA0B;;AAE1B;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA,uBAAuB,qBAAqB;AAC5C;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA,wCAAwC,qBAAqB;;AAE7D;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA,mDAAmD;AACnD;AACA;AACA;AACA,KAAK;AACL;AACA;AACA;;AAEA;AACA,8BAA8B,OAAO;AACrC;AACA;;AAEA;AACA,4BAA4B,wBAAwB;AACpD,4BAA4B,qBAAqB;;AAEjD;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;;AAGA;AACA;AACA,kBAAkB,eAAe,OAAO,UAAU,OAAO,gBAAgB,OAAO;AAChF;AACA;AACA,0CAA0C,SAAS;AACnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA,SAAS;;AAET;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,aAAa;;AAEb;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,gBAAgB;AAChB;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,SAAS;AACT;AACA;AACA;;AAEA;AACA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,uCAAuC;AACvC;AACA;AACA;AACA;;AAEA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA,gBAAgB;;AAEhB;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,wBAAwB;;AAExB,uBAAuB,yCAAyC;AAChE;AACA;AACA,SAAS;AACT;;;AAGA;AACA;AACA;AACA;AACA;AACA,6BAA6B,QAAQ;;AAErC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;;;AAGA;AACA;AACA,iBAAiB;AACjB;AACA;AACA;AACA;;AAEA;AACA,kGAA0D;AAC1D,iBAAiB,wBAAwB,yBAAyB,EAAE,kJAAkJ;AACtN;AACA;;AAEA;AACA,CAAC;;;;AAID;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA,iDAAiD,UAAU;AAC3D,sDAAsD,UAAU;AAChE;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA","file":"4.2f37ad53c850e0b80763.hot-update.js","sourcesContent":["import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport ReactDOM from 'react-dom';\n\nObject.assign = Object.assign ||\n  function(target) {\n    var arguments$1 = arguments;\n\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments$1[i];\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n    return target;\n  };\n\nfunction mask(value, precision, decimalSeparator, thousandSeparator, allowNegative, prefix, suffix){\n    if ( precision === void 0 ) precision = 2;\n    if ( decimalSeparator === void 0 ) decimalSeparator = '.';\n    if ( thousandSeparator === void 0 ) thousandSeparator = ',';\n    if ( allowNegative === void 0 ) allowNegative = false;\n    if ( prefix === void 0 ) prefix = '';\n    if ( suffix === void 0 ) suffix = '';\n\n    // provide some default values and arg validation.\n    if (precision < 0) { precision = 0; } // precision cannot be negative\n    if (precision > 20) { precision = 20; } // precision cannot be greater than 20\n    \n    if (value === null || value===undefined) {\n          return {\n              value: 0,\n              maskedValue: ''\n          };\n     }\n  \n    value = String(value); //if the given value is a Number, let's convert into String to manipulate that\n\n    if (value.length == 0) {\n        return {\n            value: 0,\n            maskedValue: ''\n        };\n    }\n\n\n    // extract digits. if no digits, fill in a zero.\n    var digits = value.match(/\\d/g) || ['0'];\n    \n    var numberIsNegative = false;\n    if (allowNegative) {\n        var negativeSignCount = (value.match(/-/g) || []).length;\n        // number will be negative if we have an odd number of \"-\"\n        // ideally, we should only ever have 0, 1 or 2 (positive number, making a number negative\n        // and making a negative number positive, respectively)\n        numberIsNegative = negativeSignCount % 2 === 1;\n        \n        // if every digit in the array is '0', then the number should never be negative\n        var allDigitsAreZero = true;\n        for (var idx=0; idx < digits.length; idx += 1) {\n            if(digits[idx] !== '0') {\n                allDigitsAreZero = false;\n                break;\n            }\n        }\n        if (allDigitsAreZero) {\n            numberIsNegative = false;\n        }\n    }\n\n    // zero-pad a input\n    while (digits.length <= precision) { digits.unshift('0'); }\n\n    if (precision > 0) {\n        // add the decimal separator\n        digits.splice(digits.length - precision, 0, \".\");\n    }\n\n    // clean up extraneous digits like leading zeros.\n    digits = Number(digits.join('')).toFixed(precision).split('');\n    var raw = Number(digits.join(''));\n\n    var decimalpos = digits.length - precision - 1;  // -1 needed to position the decimal separator before the digits.\n    if (precision > 0) {\n        // set the final decimal separator\n        digits[decimalpos] = decimalSeparator;\n    } else {\n        // when precision is 0, there is no decimal separator.\n        decimalpos = digits.length;\n    }\n\n    // add in any thousand separators\n    for (var x=decimalpos - 3; x > 0; x = x - 3) {\n        digits.splice(x, 0, thousandSeparator);\n    }\n\n    // if we have a prefix or suffix, add them in.\n    if (prefix.length > 0) { digits.unshift(prefix); }\n    if (suffix.length > 0) { digits.push(suffix); }\n\n    // if the number is negative, insert a \"-\" to\n    // the front of the array and negate the raw value\n    if (allowNegative && numberIsNegative) {\n        digits.unshift('-');\n        raw = -raw;\n    }\n\n    return {\n        value: raw,\n        maskedValue: digits.join('').trim()\n    };\n}\n\n// IE* parseFloat polyfill\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Number/parseFloat#Polyfill\nNumber.parseFloat = parseFloat;\n\nvar CurrencyInput = (function (Component$$1) {\n    function CurrencyInput(props) {\n        Component$$1.call(this, props);\n        this.prepareProps = this.prepareProps.bind(this);\n        this.handleChange = this.handleChange.bind(this);\n        this.handleFocus = this.handleFocus.bind(this);\n        this.state = this.prepareProps(this.props);\n\n        this.inputSelectionStart = 1;\n        this.inputSelectionEnd = 1;\n    }\n\n    if ( Component$$1 ) CurrencyInput.__proto__ = Component$$1;\n    CurrencyInput.prototype = Object.create( Component$$1 && Component$$1.prototype );\n    CurrencyInput.prototype.constructor = CurrencyInput;\n\n\n    /**\n     * Exposes the current masked value.\n     *\n     * @returns {String}\n     */\n    CurrencyInput.prototype.getMaskedValue = function getMaskedValue () {\n        return this.state.maskedValue;\n    };\n\n\n    /**\n     * General function used to cleanup and define the final props used for rendering\n     * @returns {{ maskedValue: {String}, value: {Number}, customProps: {Object} }}\n     */\n    CurrencyInput.prototype.prepareProps = function prepareProps (props) {\n        var customProps = Object.assign({}, props); // babeljs converts to Object.assign, then polyfills.\n        delete customProps.onChange;\n        delete customProps.onChangeEvent;\n        delete customProps.value;\n        delete customProps.decimalSeparator;\n        delete customProps.thousandSeparator;\n        delete customProps.precision;\n        delete customProps.inputType;\n        delete customProps.allowNegative;\n        delete customProps.allowEmpty;\n        delete customProps.prefix;\n        delete customProps.suffix;\n        delete customProps.selectAllOnFocus;\n        delete customProps.autoFocus;\n\n        var initialValue = props.value;\n        if (initialValue === null) {\n            initialValue = props.allowEmpty? null : '';\n        }else{\n\n            if (typeof initialValue == 'string') {\n                // Some people, when confronted with a problem, think \"I know, I'll use regular expressions.\"\n                // Now they have two problems.\n\n                // Strip out thousand separators, prefix, and suffix, etc.\n                if (props.thousandSeparator === \".\"){\n                    // special handle the . thousand separator\n                    initialValue = initialValue.replace(/\\./g, '');\n                }\n\n                if (props.decimalSeparator != \".\"){\n                    // fix the decimal separator\n                    initialValue = initialValue.replace(new RegExp(props.decimalSeparator, 'g'), '.');\n                }\n\n                //Strip out anything that is not a digit, -, or decimal separator\n                initialValue = initialValue.replace(/[^0-9-.]/g, '');\n\n                // now we can parse.\n                initialValue = Number.parseFloat(initialValue);\n            }\n            initialValue = Number(initialValue).toLocaleString(undefined, {\n                style                : 'decimal',\n                minimumFractionDigits: props.precision,\n                maximumFractionDigits: props.precision\n            });\n\n        }\n\n        var ref = mask(\n            initialValue,\n            props.precision,\n            props.decimalSeparator,\n            props.thousandSeparator,\n            props.allowNegative,\n            props.prefix,\n            props.suffix\n        );\n        var maskedValue = ref.maskedValue;\n        var value = ref.value;\n\n        return { maskedValue: maskedValue, value: value, customProps: customProps };\n    };\n\n\n    /**\n     * Component lifecycle function.\n     * Invoked when a component is receiving new props. This method is not called for the initial render.\n     *\n     * @param nextProps\n     * @see https://facebook.github.io/react/docs/component-specs.html#updating-componentwillreceiveprops\n     */\n    CurrencyInput.prototype.componentWillReceiveProps = function componentWillReceiveProps (nextProps) {\n        this.setState(this.prepareProps(nextProps));\n    };\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidmount\n     */\n    CurrencyInput.prototype.componentDidMount = function componentDidMount (){\n        var node = ReactDOM.findDOMNode(this.theInput);\n        var selectionStart, selectionEnd;\n\n        if (this.props.autoFocus) {\n            this.theInput.focus();\n            selectionEnd = this.state.maskedValue.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        } else {\n            selectionEnd = Math.min(node.selectionEnd, this.theInput.value.length - this.props.suffix.length);\n            selectionStart = Math.min(node.selectionStart, selectionEnd);\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n    };\n\n\n    /**\n     * Component lifecycle function\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentwillupdate\n     */\n    CurrencyInput.prototype.componentWillUpdate = function componentWillUpdate () {\n        var node = ReactDOM.findDOMNode(this.theInput);\n        this.inputSelectionStart = node.selectionStart;\n        this.inputSelectionEnd = node.selectionEnd;\n    };\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/react-component.html#componentdidupdate\n     */\n    CurrencyInput.prototype.componentDidUpdate = function componentDidUpdate (prevProps, prevState){\n        var ref = this.props;\n        var decimalSeparator = ref.decimalSeparator;\n        var node = ReactDOM.findDOMNode(this.theInput);\n        var isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        var minPos = this.props.prefix.length + (isNegative ? 1 : 0);\n        var selectionEnd = Math.max(minPos, Math.min(this.inputSelectionEnd, this.theInput.value.length - this.props.suffix.length));\n        var selectionStart = Math.max(minPos, Math.min(this.inputSelectionEnd, selectionEnd));\n\n        var regexEscapeRegex = /[-[\\]{}()*+?.,\\\\^$|#\\s]/g;\n        var separatorsRegex = new RegExp(decimalSeparator.replace(regexEscapeRegex, '\\\\$&') + '|' + this.props.thousandSeparator.replace(regexEscapeRegex, '\\\\$&'), 'g');\n        var currSeparatorCount = (this.state.maskedValue.match(separatorsRegex) || []).length;\n        var prevSeparatorCount = (prevState.maskedValue.match(separatorsRegex) || []).length;\n        var adjustment = Math.max(currSeparatorCount - prevSeparatorCount, 0);\n\n        selectionEnd = selectionEnd + adjustment;\n        selectionStart = selectionStart + adjustment;\n\n        var precision = Number(this.props.precision);\n\n        var baselength = this.props.suffix.length\n            + this.props.prefix.length\n            + (precision > 0 ? decimalSeparator.length : 0) // if precision is 0 there will be no decimal part\n            + precision\n            + 1; // This is to account for the default '0' value that comes before the decimal separator\n\n        if (this.state.maskedValue.length == baselength){\n            // if we are already at base length, position the cursor at the end.\n            selectionEnd = this.theInput.value.length - this.props.suffix.length;\n            selectionStart = selectionEnd;\n        }\n\n        node.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    };\n\n\n    /**\n     * onChange Event Handler\n     * @param event\n     */\n    CurrencyInput.prototype.handleChange = function handleChange (event) {\n        var this$1 = this;\n\n        event.preventDefault();\n        var ref = mask(\n            event.target.value,\n            this.props.precision,\n            this.props.decimalSeparator,\n            this.props.thousandSeparator,\n            this.props.allowNegative,\n            this.props.prefix,\n            this.props.suffix\n        );\n        var maskedValue = ref.maskedValue;\n        var value = ref.value;\n\n        event.persist();  // fixes issue #23\n\n        this.setState({ maskedValue: maskedValue, value: value }, function () {\n            this$1.props.onChange(maskedValue, value, event);\n            this$1.props.onChangeEvent(event, maskedValue, value);\n        });\n    };\n\n\n    /**\n     * onFocus Event Handler\n     * @param event\n     */\n    CurrencyInput.prototype.handleFocus = function handleFocus (event) {\n        if (!this.theInput) { return; }\n\n        //Whenever we receive focus check to see if the position is before the suffix, if not, move it.\n        var selectionEnd = this.theInput.value.length - this.props.suffix.length;\n        var isNegative = (this.theInput.value.match(/-/g) || []).length % 2 === 1;\n        var selectionStart = this.props.prefix.length + (isNegative ? 1 : 0);\n        this.props.selectAllOnFocus && event.target.setSelectionRange(selectionStart, selectionEnd);\n        this.inputSelectionStart = selectionStart;\n        this.inputSelectionEnd = selectionEnd;\n    };\n\n\n    CurrencyInput.prototype.handleBlur = function handleBlur (event) {\n        this.inputSelectionStart = 0;\n        this.inputSelectionEnd = 0;\n    };\n\n\n    /**\n     * Component lifecycle function.\n     * @returns {XML}\n     * @see https://facebook.github.io/react/docs/component-specs.html#render\n     */\n    CurrencyInput.prototype.render = function render () {\n        var this$1 = this;\n\n        return (\n            React.createElement( 'input', Object.assign({},\n                { ref: function (input) { this$1.theInput = input; }, type: this.props.inputType, value: this.state.maskedValue, onChange: this.handleChange, onFocus: this.handleFocus, onMouseUp: this.handleFocus }, this.state.customProps))\n        )\n    };\n\n    return CurrencyInput;\n}(Component));\n\n\n\n/**\n * Prop validation.\n * @see https://facebook.github.io/react/docs/component-specs.html#proptypes\n */\n\nCurrencyInput.propTypes = {\n    onChange: PropTypes.func,\n    value: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    decimalSeparator: PropTypes.string,\n    thousandSeparator: PropTypes.string,\n    precision: PropTypes.oneOfType([PropTypes.number, PropTypes.string]),\n    inputType: PropTypes.string,\n    allowNegative: PropTypes.bool,\n    allowEmpty: PropTypes.bool,\n    prefix: PropTypes.string,\n    suffix: PropTypes.string,\n    selectAllOnFocus: PropTypes.bool\n};\n\n\nCurrencyInput.defaultProps = {\n    onChange: function(maskValue, value, event) {/*no-op*/},\n    onChangeEvent: function(event, maskValue, value) {/*no-op*/},\n    autoFocus: false,\n    value: '0',\n    decimalSeparator: '.',\n    thousandSeparator: ',',\n    precision: '2',\n    inputType: 'text',\n    allowNegative: false,\n    prefix: '',\n    suffix: '',\n    selectAllOnFocus: false\n};\n\nexport default CurrencyInput;\n//# sourceMappingURL=react-currency-input.es.js.map\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./node_modules/react-currency-input/lib/react-currency-input.es.js\n// module id = ./node_modules/react-currency-input/lib/react-currency-input.es.js\n// module chunks = 4"],"sourceRoot":""}